# Setting Up Folder and Resources
cd Dev
mkdir password-manager && cd password-manager
mkdir img

cp Downloads/logo.png Dev/password-manager/img/
cp Downloads/show.png Dev/password-manager/img/
cp Downloads/hidden.png Dev/password-manager/img/

# PM Gui Design
# Configuration Window
Main Window:
Size (570, 420)
Font (Poppins)

QWidget:
Size (570, 420)
Font (Poppins)

# Configuration Background
Label DarkBg:
objectName (darkBg)
Size (260, 420)

background-color: rgb(32, 32, 35);

Label LightBg:
objectName (LightBg)
Size (311, 420)

background-color: rgb(49, 49, 52);

# Configuration DarkBg
Label Logo:
objectName (pmLogo)
Position (100, 50)
Size (60, 60)
pixmap (logo.png)
scaledContents (Check)

Label Version:
objectName (pmVersion)
Position (20, 160)
Size (61, 17)
Font (Poppins: Bold, 12)

Label About:
objectName (pmAbout)
Position (20, 190)
Size (211, 191)
Font (Poppins)

color: rgb(219, 219, 219);

# Configuration LightBg
Label Title:
objectName (pmTitle)
Position (280, 70)
Size (31, 17)
Font (Poppins: Bold, 15)

color: rgb(219, 219, 219);

Input Website:
objectName (websiteLine)
Position (280, 140)
Size (271, 25)
placeholderText (Website)

background-color: rgb(49, 49, 52);
border:2px solid rgba(49, 49, 52);
border-bottom-color:rgba(129,230,217,255);
color: rgb(255, 255, 255);
padding-bottom:7px;

Input Email:
objectName (emailLine)
Position (280, 180)
Size (271, 25)
placeholderText (Email/User Name)

background-color: rgb(49, 49, 52);
border:2px solid rgba(49, 49, 52);
border-bottom-color:rgba(129,230,217,255);
color: rgb(255, 255, 255);
padding-bottom:7px;

Button Search:
objectName (searchButton)
Position (280, 220)
Size (271, 25)
Text (Search)

QPushButton#searchButton{
	background-color: rgb(117,  214,  209);
	color:rgb(36,36,36);
	border-radius:5px;
    }
QPushButton#searchButton:pressed{
     padding-left:5px;
     padding-top:5px;
     background-position:calc(100% - 10px)center;
     }
QPushButton#searchButton:hover{
     background-color:rgba(174,  235,  232);
     }

Input Password:
objectName (passwordLine)
Position (280, 280)
Size (271, 25)
placeholderText (Password)

Button Password:
objectName (passwordEchoType)
Position (530, 280)
Size (16, 16)
Icon (hidden.png)
Flat (True)

QPushButton#passwordType:pressed{
	 background-color: transparent;
}

Button Generate:
objectName (generateButton)
Position (280, 320)
Size (131, 25)
Text (Generate)

QPushButton#generateButton{
	background-color: rgb(117,  214,  209);
	color:rgb(36,36,36);
	border-radius:5px;
    }
QPushButton#generateButton:pressed{
     padding-left:5px;
     padding-top:5px;
     background-position:calc(100% - 10px)center;
     }
QPushButton#generateButton:hover{
     background-color:rgba(174,  235,  232);
     }

Button Save:
objectName (saveButton)
Position (420, 320)
Size (131, 25)
Text (Save)

QPushButton#saveButton{
	background-color: rgb(117,  214,  209);
	color:rgb(36,36,36);
	border-radius:5px;
    }
QPushButton#saveButton:pressed{
     padding-left:5px;
     padding-top:5px;
     background-position:calc(100% - 10px)center;
     }
QPushButton#saveButton:hover{
     background-color:rgba(174,  235,  232);
     }

Now Control + R to test the Gui

# PM Backend Gui
# Configuration Class, Load Ui and Modules
import sys
import json
import string
import random

# PyQt5 Classes
from PyQt5.uic import loadUi
from PyQt5 import QtGui
from PyQt5.QtWidgets import QMainWindow, QApplication, QLineEdit

# Load Ui
class Ui(QMainWindow):
        def __init__(self):
                super(Ui, self).__init__()
                loadUi("ui.ui", self)

                self.show()

# Show Ui
app = QApplication(sys.argv)
ui = Ui()
ui.setFixedSize(570, 420)
sys.exit(app.exec_())

Now run the code to test

# Configuration Password Random Generator Button
# Password Generator Button
        def generateRandomPassword(self):
                lower = string.ascii_lowercase
                upper = string.ascii_uppercase
                numbers = string.digits
                symbols = string.punctuation

                length = 8
                temp = lower + upper + numbers + symbols

                random_password = random.sample(temp, length)
                password = "".join(random_password)

                self.passwordLine.setText(password)

                # Now Test
                print(password)

# Add button click inside class Ui
self.generateButton.clicked.connect(self.generateRandomPassword)

# Configuration Save Button
# Save Button
        def save(self):
                web = self.websiteLine.text()
                email = self.emailLine.text()
                password = self.passwordLine.text()

                # Before adding Json database, test the code
                print(web)
                print(email)
                print(password)
                
                # Last Configuration
                if web == "" or email == "" or password == "":
                        self.alert("warning", "Please fill out the blank.")
                        return

                new_data = {
                        web: {
                                "email": email,
                                "password": password
                        }
                }

                try:
                        # Append new data in json file
                        with open("./data.json", "r") as data:
                                # Reading the old data
                                data_file = json.load(data)

                except FileNotFoundError:
                        with open("./data.json", "w") as data:
                                        
                                # Saving updated data
                                json.dump(new_data, data, indent=4)

                                self.alert("success", "Data Successfully Added.")

                else:
                        # Last Configuration
                        if web not in data_file:
                                self.alert("success", "Data successfully added.")
                                
                        else:
                                if password not in data_file[web]["password"] and email not in data_file[web]["email"]:
                                        self.alert("success", f"{web} successfully update.")
                                elif password not in data_file[web]["password"]:
                                        self.alert("success", "Password successfully update.")
                                elif email not in data_file[web]["email"]:
                                        self.alert("success", "Email successfully update.")
                                else:
                                        self.alert("success", "No data changed.")

                                
                        # Updating old data to new data
                        data_file.update(new_data)
                        with open("./data.json", "w") as data:

                                # Saving updated data
                                json.dump(data_file, data, indent=4)

                # No matter if succeed the try or fail, do this
                finally:
                        # Delete all value of input after adding on database
                        self.websiteLine.clear()
                        self.passwordLine.clear()

# Add button click inside class Ui
self.saveButton.clicked.connect(self.save)

# Configuration Search Button
def search(self):
                web = self.websiteLine.text()

                # Last Configuration
                if web == "":
                        self.alert("warning", "Please fill out the website field.")
                        return

                try:
                        # Append new data in json file
                        with open("./data.json", "r") as data:
                                # Reading the old data
                                data_file = json.load(data)

                except FileNotFoundError:
                        self.alert("warning", "No data found.")

                else:
                        if web not in data_file:
                                # Last Configuration
                                self.alert("warning", "Data is not exist.")
                        
                        else:
                                self.emailLine.setText(data_file[web]["email"])
                                self.passwordLine.setText(data_file[web]["password"])

# Add button click inside class Ui
self.searchButton.clicked.connect(self.search)
